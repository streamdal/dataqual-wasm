// Code generated by counterfeiter. DO NOT EDIT.
package fake_plumber

import (
	"context"
	"sync"

	"github.com/batchcorp/plumber-schemas/build/go/protos/common"
	"github.com/streamdal/dataqual"
)

type FakeIPlumberClient struct {
	GetRulesStub        func(context.Context, string) ([]*common.RuleSet, error)
	getRulesMutex       sync.RWMutex
	getRulesArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getRulesReturns struct {
		result1 []*common.RuleSet
		result2 error
	}
	getRulesReturnsOnCall map[int]struct {
		result1 []*common.RuleSet
		result2 error
	}
	GetWasmFileStub        func(context.Context, string) ([]byte, error)
	getWasmFileMutex       sync.RWMutex
	getWasmFileArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getWasmFileReturns struct {
		result1 []byte
		result2 error
	}
	getWasmFileReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	SendRuleNotificationStub        func(context.Context, []byte, *common.Rule, string) error
	sendRuleNotificationMutex       sync.RWMutex
	sendRuleNotificationArgsForCall []struct {
		arg1 context.Context
		arg2 []byte
		arg3 *common.Rule
		arg4 string
	}
	sendRuleNotificationReturns struct {
		result1 error
	}
	sendRuleNotificationReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIPlumberClient) GetRules(arg1 context.Context, arg2 string) ([]*common.RuleSet, error) {
	fake.getRulesMutex.Lock()
	ret, specificReturn := fake.getRulesReturnsOnCall[len(fake.getRulesArgsForCall)]
	fake.getRulesArgsForCall = append(fake.getRulesArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetRulesStub
	fakeReturns := fake.getRulesReturns
	fake.recordInvocation("GetRules", []interface{}{arg1, arg2})
	fake.getRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIPlumberClient) GetRulesCallCount() int {
	fake.getRulesMutex.RLock()
	defer fake.getRulesMutex.RUnlock()
	return len(fake.getRulesArgsForCall)
}

func (fake *FakeIPlumberClient) GetRulesCalls(stub func(context.Context, string) ([]*common.RuleSet, error)) {
	fake.getRulesMutex.Lock()
	defer fake.getRulesMutex.Unlock()
	fake.GetRulesStub = stub
}

func (fake *FakeIPlumberClient) GetRulesArgsForCall(i int) (context.Context, string) {
	fake.getRulesMutex.RLock()
	defer fake.getRulesMutex.RUnlock()
	argsForCall := fake.getRulesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIPlumberClient) GetRulesReturns(result1 []*common.RuleSet, result2 error) {
	fake.getRulesMutex.Lock()
	defer fake.getRulesMutex.Unlock()
	fake.GetRulesStub = nil
	fake.getRulesReturns = struct {
		result1 []*common.RuleSet
		result2 error
	}{result1, result2}
}

func (fake *FakeIPlumberClient) GetRulesReturnsOnCall(i int, result1 []*common.RuleSet, result2 error) {
	fake.getRulesMutex.Lock()
	defer fake.getRulesMutex.Unlock()
	fake.GetRulesStub = nil
	if fake.getRulesReturnsOnCall == nil {
		fake.getRulesReturnsOnCall = make(map[int]struct {
			result1 []*common.RuleSet
			result2 error
		})
	}
	fake.getRulesReturnsOnCall[i] = struct {
		result1 []*common.RuleSet
		result2 error
	}{result1, result2}
}

func (fake *FakeIPlumberClient) GetWasmFile(arg1 context.Context, arg2 string) ([]byte, error) {
	fake.getWasmFileMutex.Lock()
	ret, specificReturn := fake.getWasmFileReturnsOnCall[len(fake.getWasmFileArgsForCall)]
	fake.getWasmFileArgsForCall = append(fake.getWasmFileArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetWasmFileStub
	fakeReturns := fake.getWasmFileReturns
	fake.recordInvocation("GetWasmFile", []interface{}{arg1, arg2})
	fake.getWasmFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIPlumberClient) GetWasmFileCallCount() int {
	fake.getWasmFileMutex.RLock()
	defer fake.getWasmFileMutex.RUnlock()
	return len(fake.getWasmFileArgsForCall)
}

func (fake *FakeIPlumberClient) GetWasmFileCalls(stub func(context.Context, string) ([]byte, error)) {
	fake.getWasmFileMutex.Lock()
	defer fake.getWasmFileMutex.Unlock()
	fake.GetWasmFileStub = stub
}

func (fake *FakeIPlumberClient) GetWasmFileArgsForCall(i int) (context.Context, string) {
	fake.getWasmFileMutex.RLock()
	defer fake.getWasmFileMutex.RUnlock()
	argsForCall := fake.getWasmFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIPlumberClient) GetWasmFileReturns(result1 []byte, result2 error) {
	fake.getWasmFileMutex.Lock()
	defer fake.getWasmFileMutex.Unlock()
	fake.GetWasmFileStub = nil
	fake.getWasmFileReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeIPlumberClient) GetWasmFileReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getWasmFileMutex.Lock()
	defer fake.getWasmFileMutex.Unlock()
	fake.GetWasmFileStub = nil
	if fake.getWasmFileReturnsOnCall == nil {
		fake.getWasmFileReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getWasmFileReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeIPlumberClient) SendRuleNotification(arg1 context.Context, arg2 []byte, arg3 *common.Rule, arg4 string) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.sendRuleNotificationMutex.Lock()
	ret, specificReturn := fake.sendRuleNotificationReturnsOnCall[len(fake.sendRuleNotificationArgsForCall)]
	fake.sendRuleNotificationArgsForCall = append(fake.sendRuleNotificationArgsForCall, struct {
		arg1 context.Context
		arg2 []byte
		arg3 *common.Rule
		arg4 string
	}{arg1, arg2Copy, arg3, arg4})
	stub := fake.SendRuleNotificationStub
	fakeReturns := fake.sendRuleNotificationReturns
	fake.recordInvocation("SendRuleNotification", []interface{}{arg1, arg2Copy, arg3, arg4})
	fake.sendRuleNotificationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIPlumberClient) SendRuleNotificationCallCount() int {
	fake.sendRuleNotificationMutex.RLock()
	defer fake.sendRuleNotificationMutex.RUnlock()
	return len(fake.sendRuleNotificationArgsForCall)
}

func (fake *FakeIPlumberClient) SendRuleNotificationCalls(stub func(context.Context, []byte, *common.Rule, string) error) {
	fake.sendRuleNotificationMutex.Lock()
	defer fake.sendRuleNotificationMutex.Unlock()
	fake.SendRuleNotificationStub = stub
}

func (fake *FakeIPlumberClient) SendRuleNotificationArgsForCall(i int) (context.Context, []byte, *common.Rule, string) {
	fake.sendRuleNotificationMutex.RLock()
	defer fake.sendRuleNotificationMutex.RUnlock()
	argsForCall := fake.sendRuleNotificationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIPlumberClient) SendRuleNotificationReturns(result1 error) {
	fake.sendRuleNotificationMutex.Lock()
	defer fake.sendRuleNotificationMutex.Unlock()
	fake.SendRuleNotificationStub = nil
	fake.sendRuleNotificationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIPlumberClient) SendRuleNotificationReturnsOnCall(i int, result1 error) {
	fake.sendRuleNotificationMutex.Lock()
	defer fake.sendRuleNotificationMutex.Unlock()
	fake.SendRuleNotificationStub = nil
	if fake.sendRuleNotificationReturnsOnCall == nil {
		fake.sendRuleNotificationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendRuleNotificationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIPlumberClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRulesMutex.RLock()
	defer fake.getRulesMutex.RUnlock()
	fake.getWasmFileMutex.RLock()
	defer fake.getWasmFileMutex.RUnlock()
	fake.sendRuleNotificationMutex.RLock()
	defer fake.sendRuleNotificationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIPlumberClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dataqual.IPlumberClient = new(FakeIPlumberClient)
